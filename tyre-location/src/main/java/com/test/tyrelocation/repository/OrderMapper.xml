<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.test.tyrelocation.repository.OrderMapper">
  <resultMap id="BaseResultMap" type="com.test.tyrelocation.entity.Order">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="product_id" jdbcType="BIGINT" property="productId" />
    <result column="order_type" jdbcType="INTEGER" property="orderType" />
    <result column="money" jdbcType="DECIMAL" property="money" />
    <result column="order_time" jdbcType="TIMESTAMP" property="orderTime" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, product_id, order_type, money, order_time, status, pay_time, gmt_create, gmt_modified
  </sql>
  <sql id="Transfer_Column_List">
    id, user_id, product_id, order_type, money, order_time, status, pay_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from `order`
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByUserIdAndId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `order`
    where id = #{orderId,jdbcType=BIGINT}
    and user_id = #{userId}
  </select>
  <select id="selectByUserId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Transfer_Column_List" />
    from `order`
    where user_id = #{userId,jdbcType=BIGINT}
  </select>
  <select id="selectByUserIdAndUnpaid" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Transfer_Column_List" />
    from `order`
    where user_id = #{userId,jdbcType=BIGINT}
    and status = 2
  </select>
  <select id="selectByUserIdAndPaid" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Transfer_Column_List" />
    from `order`
    where user_id = #{userId,jdbcType=BIGINT}
    and status = 1
  </select>
  <select id="selectSumByYMD"  resultType="java.lang.Integer">
    select
    sum(money)
    from `order`
    where DATE_FORMAT(pay_time, #{ft}) = #{dt}
    and user_id = #{userId}
  </select>
  <select id="selectCountByUserIdAndStatus"  resultType="java.lang.Integer">
    select
    count(*)
    from `order`
    where user_id = #{userId}
    <if test="status!=0">
        and status = #{status}
    </if>
  </select>
  <select id="selectPageByUserIdAndStatus"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `order`
    where user_id = #{userId}
    <if test="bean.status!=0">
      and status = #{bean.status}
    </if>
    limit #{bean.startRow}, #{bean.pageSize}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from `order`
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.test.tyrelocation.entity.Order">
    insert into `order` (id, user_id, product_id,
      order_type, money, order_time,
      status, pay_time, gmt_create, 
      gmt_modified)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{productId,jdbcType=BIGINT}, 
      #{orderType,jdbcType=INTEGER}, #{money,jdbcType=DECIMAL}, #{orderTime,jdbcType=TIMESTAMP},
      #{status,jdbcType=INTEGER}, #{payTime,jdbcType=TIMESTAMP}, #{gmtCreate,jdbcType=TIMESTAMP}, 
      #{gmtModified,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.test.tyrelocation.entity.Order">
    insert into `order`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="orderType != null">
        order_type,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="orderTime != null">
        order_time,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtModified != null">
        gmt_modified,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=BIGINT},
      </if>
      <if test="orderType != null">
        #{orderType,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        #{money,jdbcType=DECIMAL},
      </if>
      <if test="orderTime != null">
        #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.test.tyrelocation.entity.Order">
    update `order`
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=BIGINT},
      </if>
      <if test="orderType != null">
        order_type = #{orderType,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=DECIMAL},
      </if>
      <if test="orderTime != null">
        order_time = #{orderTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.test.tyrelocation.entity.Order">
    update `order`
    set user_id = #{userId,jdbcType=BIGINT},
      product_id = #{productId,jdbcType=BIGINT},
      order_type = #{orderType,jdbcType=INTEGER},
      money = #{money,jdbcType=DECIMAL},
      order_time = #{orderTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateStatusByPrimaryKey" parameterType="com.test.tyrelocation.entity.Order">
    update `order`
    set
    status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>